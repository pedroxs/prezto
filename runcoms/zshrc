#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...

# Use the builtin which command
unalias which &> /dev/null

# Add git-flow completition
source "${ZDOTDIR:-$HOME}/.zprezto/modules/git/external/git-flow-completion.zsh"

# tips from http://joshsymonds.com/blog/2014/06/12/shell-awesomeness-with-prezto/
# only fools wouldn't do this ;-)
#export EDITOR="subl -n -w"

# Case insensitive globbing
setopt NO_CASE_GLOB
setopt EXTENDED_GLOB

# deprecated, use jq
# json pretty print
#alias json='python -mjson.tool'

# Local functions
if [[ -d "${ZDOTDIR:-$HOME}/.zprezto/zfunc" ]]; then
  # Add to fpath
  fpath=("${ZDOTDIR:-$HOME}/.zprezto/zfunc" $fpath)

  # Load functions.
  local pfunction_glob='^([_.]*|prompt_*_setup|README*|*~)(-.N:t)'
  for pfunction in ${ZDOTDIR:-$HOME}/.zprezto/zfunc/$~pfunction_glob; do
    autoload -Uz "$pfunction"
  done
fi

# AWS cli completition
if [[ -d /usr/local/aws/bin ]]; then
  export PATH=/usr/local/aws/bin:$PATH
  source /usr/local/bin/aws_zsh_completer.sh
fi
if [[ -d $HOME/.local/bin ]]; then
  export PATH=$HOME/.local/bin:$PATH
fi

# AWS cli completition for pip installs
[[ -f $(which aws_zsh_completer.sh) ]] && source $(which aws_zsh_completer.sh)

# zsh nvm plugin
if [[ -d "$HOME/.zsh-nvm" ]]; then
  export NVM_LAZY_LOAD=true
  source "$HOME/.zsh-nvm/zsh-nvm.plugin.zsh"
#else
#  # npm config if no nvm detected
#  export NPM_CONFIG_PREFIX="$HOME/.npm-global"
#  if [[ ! -d "$NPM_CONFIG_PREFIX" ]]; then
#    mkdir -p "$NPM_CONFIG_PREFIX"
#  fi
fi

# nvm mac
if [[ -d "$HOME/.nvm" ]]; then
  export NVM_LAZY_LOAD=true
  export NVM_DIR="$HOME/.nvm"
  [ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh"  # This loads nvm
  [ -s "/usr/local/opt/nvm/etc/bash_completion.d/nvm" ] && . "/usr/local/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion
fi

# linux brew completition
if [[ -d "$HOME/.linuxbrew" ]]; then
  fpath=($HOME/.linuxbrew/completions/zsh $fpath)
  fpath=($HOME/.linuxbrew/share/zsh-completions $fpath)
fi
if [[ -d "/home/linuxbrew/.linuxbrew" ]]; then
  fpath=(/home/linuxbrew/.linuxbrew/Homebrew/completions/zsh $fpath)
fi

# mac brew completition
if type brew &>/dev/null; then
  FPATH=$(brew --prefix)/share/zsh/site-functions:$FPATH

  autoload -Uz compinit
  compinit
fi

###-tns-completion-start-###
if [ -f $HOME/.tnsrc ]; then 
    source $HOME/.tnsrc 
fi
###-tns-completion-end-###

# vim settings
if [ -e /usr/bin/vim ]; then 
  alias vi='/usr/bin/vim'; 
fi

if [ -e /usr/bin/vimx ]; then 
  alias vim='/usr/bin/vimx'; 
fi


# The next line updates PATH for the Google Cloud SDK.
if [ -f "$HOME/google-cloud-sdk/path.zsh.inc" ]; then source "$HOME/google-cloud-sdk/path.zsh.inc"; fi
# For Mac with brew
if [ -f "/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc" ]; then source "/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc"; fi

# The next line enables shell command completion for gcloud.
if [ -f "$HOME/google-cloud-sdk/completion.zsh.inc" ]; then source "$HOME/google-cloud-sdk/completion.zsh.inc"; fi
# For Mac with brew
if [ -f "/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc" ]; then source "/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc"; fi


# tabtab source for jhipster package
# uninstall by removing these lines or running `tabtab uninstall jhipster`
[[ -f "$HOME/.config/yarn/global/node_modules/tabtab/.completions/jhipster.zsh" ]] && source "$HOME/.config/yarn/global/node_modules/tabtab/.completions/jhipster.zsh"


function docker-inspect() {
  docker inspect --format '{{$e := . }}{{with .NetworkSettings}} {{$e.Name}}
  {{range $index, $net := .Networks}}{{$index}} {{.IPAddress}}
  {{end}}{{end}}' $(docker ps -q)
}

# Show external IP address
alias wanip='dig @208.67.222.220 myip.opendns.com +short'

# AWS Cli experimental
function sec-list-ips() {
  local dev=sg-00853d330fc772c7a
  local qa=sg-fa6b3d8d
  local prod=sg-c68bccb0
  local gid

  case "$1" in
    dev)
      echo "$dev"
      gid=$dev
      ;;
    qa)
      echo "$qa"
      gid=$qa
      ;;
    prod)
      echo "$prod"
      gid=$prod
      ;;
    *)
      echo "Usage: $0 {dev|qa|prod}"
      return 1
      ;;
  esac

  aws ec2 describe-security-groups --group-ids "$gid" --query "SecurityGroups[*].{Name:Tags[0].Value,GroupName:GroupName,Id:GroupId,IpPermissions:IpPermissions[*].{IpRanges:IpRanges}}"
}
